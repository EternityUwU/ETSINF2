# Practica 10 ETC

1. ‚ñ∫ ¬øCu√°ntos elementos tienen los vectores del programa? ¬øCu√°ntos bytes ocupa cada
elemento?
    A -> 8 elementos || 8 * 4 = 32 Bytes
    B -> 1 elemento  ||         32 Bytes 
    k -> 1 elemento  ||          4 Bytes
    dim -> 1 elemento||          4 Bytes

2. ‚ñ∫ Complete la siguiente informaci√≥n del segmento de datos. Utilice el sistema hexadecimal
para expresar las direcciones de memoria (haga igual a lo largo de toda la pr√°ctica).

    Direcci√≥n inicial del vector A          0x1000000
    Bytes ocupados por el vector A          32
    Direcci√≥n inicial del vector B          0x1000100
    Bytes ocupados por el vector B          32
    Direcci√≥n de la variable k              0x1000A030
    Direcci√≥n de la variable dim            0x1000A034


3. ‚ñ∫ Complete la siguiente informaci√≥n del segmento de c√≥digo. En este caso no olvide tener
en cuenta la traducci√≥n de las pseudoinstrucciones del programa en instrucciones m√°quina,
ya que son estas √∫ltimas las √∫nicas que hay que considerar. En este caso le ser√° de utilidad 
cargar el programa en el simulador (no hace falta ejecutarlo) para ver la direcci√≥n donde se
encuentra la √∫ltima instrucci√≥n del programa.

    Direcci√≥n de la primera instrucci√≥n                         0x00400000
    Direcci√≥n de la √∫ltima instrucci√≥n                          0x00400050
    N√∫mero de instrucciones del programa                        21
    Bytes ocupados por el c√≥digo del programa (instrucciones)   21*4 -> 4

4. ‚ñ∫ Determine el n√∫mero de accesos al sistema de memoria del programa.

    Accesos al segmento de datos            8*2 + 2 = 18
    Accesos al segmento de c√≥digo           8 + 2 +(2 + 8*8 + 1) = 77


5. ‚ñ∫ Teniendo en cuenta las caracter√≠sticas anteriores, indique cu√°ntas l√≠neas hay en la
memoria cache. 

    Lineas = 128B / 4B = 32


6. ‚ñ∫ Indique cu√°l ser√° la interpretaci√≥n que esta memoria cache har√° de las direcciones que
reciba (campos de etiqueta, l√≠nea y desplazamiento).

    desplazamiento -> 2  || Lineas -> 5 || etiqueta -> 25


7. ‚ñ∫ La instrucci√≥n del programa jal sax est√° almacenada en la direcci√≥n 0x0040001C
del segmento de c√≥digo. Indique en qu√© l√≠nea de la cache se ubicar√° y con qu√© etiqueta.

    0x0040001C -> |0000 0000 0100 0000 0000 0000 0|-|001 11|-|00            ==> linea = 00111 => 7 || etiqueta = 1000 0000 0000 0000 => 2048
                    Etiqueta                         Linea    Desplazamento 

8. ‚ñ∫ Calcule, para este caso, cu√°ntos bits de control se almacenan por l√≠nea. As√≠ mismo,
calcule el volumen del directorio, esto es, el n√∫mero total de bits de control contenidos en la
memoria cache de c√≥digo.

    bits de control -> 25(etiqueta) + 1(valido) || volumen de directorio -> 26 bits * 32 lineas = 832 bit =  104 Bytes

9. ‚ñ∫ Cargue el programa original y ejec√∫telo mediante la opci√≥n F10 (paso a paso) para poder
seguir con detalle el efecto sobre la memoria cache de c√≥digo. Observe que la lectura de
cualquier instrucci√≥n afecta a la cache de c√≥digo, pero la ejecuci√≥n de las instrucciones de
memoria (lw, sw, etc.) afecta, adem√°s, a la cache de datos que ahora no consideramos.
Adem√°s, f√≠jese en que el procesamiento de las 18 primeras instrucciones solamente originan
fallos (mensaje miss en el simulador) y que el primer acierto se produce en el decimonoveno
acceso a la cache de instrucciones. Complete la siguiente tabla:

            Accesos al segmento de c√≥digo       77
            Aciertos                            56
            Fallos                              21
            Tasa de aciertos (H)             0,727

10. ‚ñ∫ Confirme que la instrucci√≥n jal sax se almacena en la l√≠nea prevista y con la etiqueta
calculada anteriormente.

    Confirmado

11. ‚ñ∫ Suponga ahora que la memoria principal del MIPS R2000 est√° implementada con
m√≥dulos cuyos chips funcionan a 50 MHz (periodo de 20 ns) y tienen como par√°metros
tCL=2 (latencia de CAS) y tRCD=3 (tiempo entre RAS y CAS); ambos par√°metros est√°n
expresados en ciclos de reloj. Suponga adem√°s que el tiempo de acceso a la memoria cache
es de 10 nanosegundos. Recuerde que este tiempo se puede calcular mediante la f√≥rmula:
                ùëáùëá = ùêªùêª √ó Tacierto + (1 ‚àí ùêªùêª) √ó Tfallo

                Tacierto = 10ns
                Tfallo = tCL + tRCD = (3+2)*20 = 100ns

                TT = 0.727 * 10ns + (1- 0.727) * 100ns = 34.5454ns

12. ‚ñ∫ Use el simulador y configure la memoria cache de c√≥digo con un tama√±o de bloque de 16
bytes y manteniendo el resto de par√°metros como estaban. Cargue y ejecute ahora el
programa original y complete la siguiente tabla:

            Accesos al segmento de c√≥digo       77
            Aciertos                            71
            Fallos                               8
            Tasa de aciertos (H)             0,922

13. ‚ñ∫ Como se aprecia, el n√∫mero de fallos se ha visto reducido de forma considerable. ¬øCu√°l
es la raz√≥n?

La raz√≥n se debe a que al ser el bloque m√°s grande, cuando hay un fallo de traen m√°s bloques de la memoria principal a la cache
